#!/bin/sh

#### begin octoolchain-shared-header ####

# This header is shared across all ocutil sh scripts. All it does is search for
# and load the appropriate configuration file.

# the following paths are searched, in order of priority:
#

OC_CFG_SEARCH_PATHS="/etc/openchariot/openchariot.cfg /usr/local/etc/openchariot/openchariot.cfg $HOME/.local/share/openchariot/etc/openchariot/openchariot.cfg ./openchariot.cfg"
OC_LIB_SEARCH_PATHS="/lib/openchariot /usr/local/lib/openchariot $HOME/.local/share/openchariot/lib/openchariot ./lib/openchariot"

OC_FOUND_CFG="NO"
OC_FOUND_LIB="NO"

OC_PREFIX="ERROR"

for p in $OC_CFG_SEARCH_PATHS ; do
	if [ -e "$p" ] ; then
		. "$p"
		OC_FOUND_CFG="YES"
		OC_PREFIX=`dirname "$p"`/../..
		OC_PREFIX=`realpath "$OC_PREFIX"`
		break
	fi
done

OC_LIB_DIR="ERROR"

for p in $OC_LIB_SEARCH_PATHS ; do
	if [ -d "$p" ] ; then
		OC_LIB_DIR="$p"
		OC_FOUND_LIB="YES"
		break
	fi
done

if [ ! -e "$OC_PREFIX" ] ; then
	echo "PANIC: prefix was not found at any of: "
	for p in $OC_CFG_SEARCH_PATHS ; do
		echo "$p"
	done
	exit 1
fi

OC_ETC_DIR="$OC_PREFIX/etc/openchariot"

if [ "$OC_FOUND_LIB" != "YES" ] ; then
	echo "PANIC: failed to find openchariot in any of $OC_LIB_SEARCH_PATHS"
	exit 1
fi

if [ "$OC_FOUND_CFG" != "YES" ] ; then
	echo "PANIC: failed to find openchariot config at any of: $OC_CFG_SEARCH_PATHS"
	exit 1
fi

if [ "$OC_MAGIC" != "OpenChariot" ] ; then
	echo "PANIC: config was found, but OC_MAGIC was incorrect"
	exit 1
fi

# figure out where the shared CSS file is
OC_WEBLIB_DIR="$OC_LIB_DIR/web"
if [ ! -d "$OC_WEBLIB_DIR" ] ; then
	echo "PANIC: $OC_WEBLIB_DIR does not exist!"
	exit 1
fi

OC_CSS_FILE="$OC_WEBLIB_DIR/openchariot.css"
if [ ! -e "$OC_CSS_FILE" ] ; then
	echo "PANIC: failed to locate shared CSS file at $OC_CSS_FILE"
	exit 1
fi

# make sure the OpenChariot bin dir is in $PATH, this is sometimes an issue
# for prefixed development setups.
export PATH="$PATH:$OC_PREFIX/bin"

function oc_log_debug () {
	if [ $OC_SUPPRESS_DEBUG == "YES" ] ; then
		return
	fi
	timestamp=$(date)
	printf "[DEBUG][$timestamp]: $@\n" > /dev/stderr
}

function oc_log_info () {
	if [ $OC_SUPPRESS_INFO == "YES" ] ; then
		return
	fi
	timestamp=$(date)
	printf "[INFO][$timestamp]: $@\n" > /dev/stderr
}

function oc_log_warn () {
	timestamp=$(date)
	printf "[WARN][$timestamp]: $@\n" > /dev/stderr
}

function oc_log_error () {
	timestamp=$(date)
	printf "[ERROR][$timestamp]: $@\n" > /dev/stderr
}

function oc_runas_git () {
	# run $@ as the git user
	oc_log_debug "Running as user '$OC_GIT_USER', '$@'"
	sudo -u $OC_GIT_USER -H bash -c "$@"
}

# Note that OC_VERSION is injected below this line during build.
