##########################
OpenChariot - Architecture
##########################

.. contents::

Overview
========

The OpenChariot software is implemented as a loosely-coupled set of shell
scripts.  Each shell script is executed in turn by the *spooler*,
``ocutil-spooler``. This spooler ensures that each script exited cleanly, and
maintains a log file of messages emitted by each script.

OpenChariot does not run as a daemon, rather the spooler is executed frequently
by another process (usually ``cron``). As a result, OpenChariot does not
respond to "hooks", but rather polls at a set time interval. This makes the
project much easier to develop.

Individual components (which always begin with ``ocutil-``) may be run
standalone either for debugging or to integrate with other tools. Additional
functionality may be added by simply adding more calls into the spooler.

Code-sharing is accomplished by injecting a header into each shell script at
build-time. This header handles locating and sourcing OpenChariot configuration
files, and also provides utility methods and sanity checking.

Web Components
==============

OpenChariot provides, among other functionality, a set of web components which
are made accessible as static webpages. These pages are generated by
``ocutil-spooler``, and written out to a configurable directory for serving.
Because all of OpenChariot's web components produce only static output,
OpenChariot is extremely secure - there is no database to hack, nor any
back-end to inject code into.

Authentication & Security
=========================

OpenChariot takes a pragmatic approach to authentication - it does none. It is
assumed that everyone who has access to the webserver you server OpenChariot's
web components on should have full read-only access to all of your
repositories. It is assumed that everyone who can authenticate against the
git user on your OpenChariot server should have commit access to all of your
repositories.

This may seem like a disadvantage at first glance, but remember the use case
for OpenChariot; it does not attempt to compete with larger solutions such
as GitLab or GoGs. OpenChariot is designed for individuals and small teams and
businesses where everyone can trust everyone else.

It is suggested that if OpenChariot is to be used in an environment where all
users cannot be trusted that multiple instances be installed on multiple
physical (or virtual) servers, each with their own set of users who can
authenticate for either web or ssh (and thus git) access. That said, if more
sophisticated access control is required you are probably better off using
another solution such as GitLab, GoGs, or Gitea.

Dependancies
============

OpenChariot relies heavily on existing software to provide it's web interface.
This avoid re-inventing the wheel, and thus saves development time and effort.
OpenChariot's dependencies are simply accessed through ``$PATH`` and must be
installed by user before OpenChariot can be run successfully. The
script ``ocutil-validate-dep`` ensures OpenChariot will not run if any
dependencies are missing.

OpenChariot depends on the following projects:

* git-arr - provides the web-based repository browser and commit viewer.
* gitstats - generates a set of static webpages containing statistics about
  each repo.
* BugsEverywhere - used for bug tracking, and to generate a static page list
  the issues, their history, and their comments for each repo.

Project Structure
=================

``src/`` - project source code.

``src/core/`` - source code which is primary to the project's
functionality.

``src/core/bin`` - source code which will produce executable files that will be
made available via ``$PATH``.

``src/doc`` - source files for project documentation.

``src/etc`` - default configuration files for OpenChariot and dependencies as
required.

``src/toolchain`` - scripts, templates, and other supporting material which is
used to build OpenChariot, but is not included in redistributable tarballs.

``src/web`` - static assets which are used for OpenChariot's web components.

``CHANGELOG`` - text file containing a record of all changes associated with
each release.

``CONTRIBUTORS`` - text file listing those who have contributed to the
OpenChariot project.

``LICENSE`` - the OpenChariot project license.

``VERSION`` - a version number triplet and release type, separated by a ``-``.
This is used by the build system as appropriate to embed release versions in
documentation, code, and so on.
